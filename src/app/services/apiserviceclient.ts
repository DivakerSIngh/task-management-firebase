/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.3.0 (NJsonSchema v10.1.5.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
import { LoaderService } from './loader.service';
import { environment } from 'environments/environment';

export const API_BASE_URL =environment.apiBaseUrl;// 'http://localhost:50611'// new OpaqueToken('API_BASE_URL');
//export const API_BASE_URL = 'http://task1.4thminds.com'// new OpaqueToken('API_BASE_URL');

@Injectable()
export class ApiServiceClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(private loader: LoaderService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : environment.apiBaseUrl;//'http://localhost:50611';// "http://task1.4thminds.com";
    }

    /**
     * @param pagingModel_pageNumber (optional) 
     * @param pagingModel__pageSize (optional) 
     * @param pagingModel_pageSize (optional) 
     * @return OK
     */
    get(apiurl, params) {//pagingModel_pageNumber: number | null | undefined, pagingModel__pageSize: number | null | undefined): Observable<ApiResponse> {
        let url_ = this.baseUrl + apiurl
       
        for (var obj in params) {
            for (var key in params[obj]) {
                url_ += key + '=' + encodeURIComponent(params[obj][key]) + '&';
            }
        }



        this.loader.display(true);
        // let url_ = this.baseUrl + apiurl;// "/api/course/getall?";
        // if (pagingModel_pageNumber !== undefined)
        //     url_ += "pagingModel.pageNumber=" + encodeURIComponent("" + pagingModel_pageNumber) + "&";
        // if (pagingModel__pageSize !== undefined)
        //     url_ += "pagingModel._pageSize=" + encodeURIComponent("" + pagingModel__pageSize) + "&";

        url_ = url_.replace(/[?&]$/, "");

       
        let options_: any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
                "UserId":localStorage.getItem('userid')
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            this.loader.display(false);
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ApiResponse> {
        this.loader.display(false);
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                //result200 = Object.fromJS(resultData200);
                return _observableOf(resultData200);
            }));
        } else if (status !== 200 && status !== 204) {
           
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);

            }));
        }
        return _observableOf<ApiResponse>(<any>null);
    }

    /**
     * @return OK
     */
    delete(apiurl, course: any): Observable<ApiResponse> {
        this.loader.display(true);
        let url_ = this.baseUrl + apiurl;
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(course);

        let options_: any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json",
                "UserId":localStorage.getItem('userid')
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            this.loader.display(false);
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ApiResponse> {
        this.loader.display(false);
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (status === 200) {
            this.loader.showNotification("Data deleted successfully !", 'success');
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                // result200 = Object.fromJS(resultData200);
                return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            this.loader.showNotification("An unexpected server error occurred.", 'danger');
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse>(<any>null);
    }

    /**
     * @return OK
     */
    post(apiurl, course: any): Observable<ApiResponse> {
        this.loader.display(true);
        let url_ = this.baseUrl + apiurl;
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(course);

        let options_: any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processSave(response_);
        })).pipe(_observableCatch((response_: any) => {
            this.loader.display(false);
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSave(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse>><any>_observableThrow(response_);
        }));
    }

    protected processSave(response: HttpResponseBase): Observable<ApiResponse> {
        this.loader.display(false);
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (status === 200) {
            this.loader.showNotification("Data saved successfully !", 'success');
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                //result200 = Object.fromJS(resultData200);
                return _observableOf(resultData200);
            }));
        } else if (status !== 200 && status !== 204) {
            this.loader.showNotification("An unexpected server error occurred.", 'danger');
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse>(<any>null);
    }

    /**
     * @return OK
     */
    put(apiurl, course: any): Observable<ApiResponse> {
        this.loader.display(true);
        let url_ = this.baseUrl + apiurl;
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(course);

        let options_: any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            this.loader.display(false);
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<ApiResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApiResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ApiResponse> {
        this.loader.display(false);
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (status === 200) {
            this.loader.showNotification("Data saved successfully !", 'success');
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                //result200 = Object.fromJS(resultData200);
                return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            this.loader.showNotification("An unexpected server error occurred.", 'danger');
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse>(<any>null);
    }
}

export class ApiResponse {
    constructor(parameters) {

    }
    status: string;
    code: number;
    result: any;
    pages: any;
    extra:any;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}